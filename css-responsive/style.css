html {
  /* font-size: 18px; */
  font-size: 62.5%; /* Makes the default 16px become 10px, makes size math
                       math easier */
  /* People don't usually do this and leaves size to default, mostly */
}

body {
  margin: 0;
  font-size: 1.6rem;
}

/* PERCENTAGES */
/** Percentages should be used to define width. The percentage width of an 
  * element is the width of that element relative to its parent element so.
  * container will be 50% of the width of its section and header and footer 
  * 50% of the screen size/body.
  *
  * NEVER USE FIXED WIDTHS
**/ 

img {
  display: block; /* For some reason imgs are inline-block, change that */
  width: 100%; /* Adjust with size of parent element */
  /* max-width: 100% Grow but only upto actual image size instead of
  following container, prevents blurry images */
} /** Always reset img elements with these attributes otherwise img will be
    * static and use its actual width
    * Set only either width or height, let browser handle the aspect ratio
  **/

.container {
  width: 90%;
  max-width: 900px; /* Adjust up to width and stop growing */
  min-width: 300px;
  border: 2px solid magenta;
  display: flex;
  flex-direction: column;
  gap: 1em;
  margin: 0 auto;
}

p {
  margin-top: 0;
}

/** max-width = Ensures elements don't become too large
  * min-width = Ensures elements don't become too small
**/

header {
  background-color: blue;
  width: 70%;
}

footer {
  background: lightcoral;
  color: white;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 2em;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Always start with global selectors then if it's not possible to use them
   use classes */
h1,
h2,
.article-info {
  font-family: 'Segoe UI', sans-serif;
  font-weight: 400;
  color: darkolivegreen;
  margin-top: 0; /* Gets rid of the annoying space above headers, make good
                    use of it */
}

h1 {
  color: red;
}

/* EM */
/** Relative Units = units always relative either to a font-size or the size of
  * the viewport (browser window).
  *
  * em & rem = units that are relative to the font-size of parent elements
  *            since font-sizes are usually set in the body and the default is
  *            usually 16px, when used they are relative to 16px.
**/

.list {
  font-size: 9.5em; 
  border: 2px solid green;
}

.list li {
  /* font-size: 1em; 1 * font-size of parent element so basically the same */
  /* font-size: 5.5em; 5.5 * font-size of parent element, BIGGER */
  font-size: 0.3em; /* 0.3 * font-size of parent, SMALLER */
}

/** Note how li elements are following the list class font-size instead 
  * of the body
**/

/** em units are convenient but create cascading effect when used for
  * size 
  *
  * cascading effect = an inevitable and sometimes unforeseen chain of 
  * events due to code affecting the style of a page
  * 
  * Imagine two divs with different font-sizes each with p elements with 
  * font-sizes using em units, what would happen is you'll have two divs
  * that look WAY DIFFERENT from each other, with more nested elements
  * this quickly gets out of control
**/

/* REM */
/** rem = Short for Root Em, always relative to the root of the document
  * which is the html element itself
  * 
**/

.rem-list {
  font-size: 5.5em; /* Ok apparently sections follow font-sizes, see large */
  border: 2px solid pink; /* gap */
}

.rem-list li {
  font-size: 1.5rem; /* Note how this doesn't make the list items large */
}

/* PICKING WHICH UNIT TO USE */
/**
  * px = used to cause a lot of problems as they were a fixed unit
  *      a dot on the screen.
  *
  *      This changed however and now a px is a REFERENCE PIXEL
  *
  * Reference Pixel = a pixel that takes the proximity of the screen 
  *                   into account, confusing? YES
  *
**/

/**  
  * RULE OF THUMB:
  * Font-size = rem (you want text to look the same all over)
  * Padding and margin = em (pads and margins are unique per element usually)
  * Widths = em or percentage (you want elements relative to viewport)
  *
  * These rules are not static; Change as the situation suits it
**/

/* EM & REM */
.card {
  border: 2px solid gold;
}

.card .btn-big {
  font-size: 5.5rem; /* Buttons don't follow the body's font-size */
  padding: 0.5em; /* This is basing on the button's OWN font-size */ 
}

.card .btn-small {
  font-size: 0.8rem;
  padding: 9.5em; /* Twice of element */
}

/** 
  * WHAT'S THE POINT OF RELATIVE UNITS:
  * So we can change font-sizes for all elements without editing multiple
  * attributes, great for media query
**/

/* FLEXBOX */
/**
  * Block Elements = elements that STACK on top of each other
  *                  Ex: div, header, footer, main, section, ul, ol,
  *                      h1->h6, p, etc.
  *
  * Inline Elements = elements that sit side by side, cannot have width/height
  *                   Ex: a, strong, em, span
  *
  * Inline-Block Elements = sit side by side, can have width/height
  *                         Ex: img
**/

/**
  * display: flex = stack all elements within side by side
  *                 elements become columns and fit-content according to width
  *                 of parent's parent (if inside div)
**/

/* A SUGGESTION */
/** 
  * It's good to think that something in the future might change so it's best
  * to add attributes that will easily be reconfigured in the future
  *
  * Ex: Never change the width of the body, instead put your elements in a
  *     container and edit the width of the container instead.
**/

.fancy {
  display: flex;
  flex-direction: column;
  width: 80%;
  max-width: 800px;
  margin: 0 auto;
  border: 2px solid teal; 
}

.fancy p {
  margin-top: 0; /* Now paragraphs don't give additional space with the
                    space below headers already */
}
/* .fancy img {
  
} */

.fancy .column {
  display: flex;
  margin: 1em 1em;
}


.content-bg {
  background-color: brown;
  color: antiquewhite;
  /* padding: 1.5em; */
  padding-left: 1.5em;
  padding-right: 1.5em;
}

.con-special {
  padding-top: 1.5em;
}

/* JUSTIFY-CONTENT */
/** 
  * Deals with the x-axis of elements in a flexbox
  *
  * space-between = adds spaces between elements
  * space-around = adds spaces between and around elements
  * space-evenly = space between and around evenly
**/

.fancy .column {
  justify-content: space-between;
}

/* This is cool but a bit too fixed */
/* .con-1 {
  width: 25%;
}

.con-2 {
  width: 60%;
}

.con-3 {
  width: 85%;
} */

/** 
  * justify-content: space-between + width: percent%;
  *
  * The goal is to let justify-content handle the gaps and width the
  * sizes of each div
**/
.con-1 {
  width: 20%;
  border: 2px solid salmon;
}

.con-2 {
  width: 45%;
  border: 2px solid forestgreen;
}

.con-3 {
  width: 70%;
  border: 2px solid bisque;
}

/* ALIGN-ITEMS */
/**  
  * Deals with the y-axis of elements in a flexbox
  *
  * flex-start = items at top
  * center = items at center
  * flex-end = items at bottom
  * baseline = items in a straight line based on text
  * stretch = default, stretch to height of page
**/

/* Makes it so that our content with bg-color, bg only applied to its
   whole self instead of stretching and makes all content start at top*/
.fancy .column {
  align-items: flex-start; 
}

/* MEDIA QUERY BASICS */
/**  
  * Media query = add new styles if condition met
  *
  * @media media-type and (media-features) {
  *   code block...
  * }
  *
  * Media-types:
  * all = all media types, default
  * print = print preview
  * screen = computers, tablets, phones, you're gonna be using this
  *
  * Media-features (commonly used ones):
  * orientation = landscape/portrait
  * max-height
  * min-height
  * height
  * max-width
  * min-width
  * width
  *
  * A media query can be made without a media-type and a media-feature
  * but we need either one
  *
  * Ex:
  * @media screen {}
  * @media (width:600px) {}
  *
  * Should always be after the DEFAULT stylings
**/

body {
  background-color: lightslategray;
}

/* max width <= */
/* min width >= */
/* >= and <= for between */
/* When viewport reaches width of <= 800px make bg white */
@media (max-width: 800px) {
  body {
    background-color: white;
  }
}

@media (min-width: 801px) and (max-width: 999px) {
  body {
    background-color: skyblue;
  }
}

/* This is a more sensible way of doing the above tbh */
@media (max-width: 1200px) and (min-width: 1000px) {
  body {
    background-color: steelblue;
  }
}

@media (max-width: 400px) and (orientation: portrait) {
  body {
    background-color: aquamarine;
  }
}

/* Makes it so our content STACKS when width <= 600px (mobile) */
@media (max-width: 600px) {
  .column {
    flex-direction: column;
  }

  .con-1,
  .con-2,
  .con-3 {
    width: 100%;
  }

  /* So our colored bg cards don't overflow the div */
  .con-unspecial {
    max-width: fit-content;
  }

  .con-special {
    max-width: fit-content;
  }
}

/* THE POINT OF FLEX-DIRECTION: COLUMN */
/** 
  * When you set the flex-direction column it doesn't just revert back to the
  * default behavior. Instead it changes the axis of the content from the
  * x-axis to the y-axis and retaining all the capabilities given by flexbox.
  * justify-content, align-items, gap all still work but now justify-content
  * works vertically and align-items work horizontally, remember column 
  * changes the axis to the y-axis
**/

/* CREATING A NAVBAR */
/** 
  * Apparently compound selectors are frownd upon and are a resrouce drain for
  * old computers so don't use them as much as possible.
**/

.header {
  background-color: inherit;
  width: 100%;
  padding: 2em 0em;
  background-color: cadetblue;
  display: flex;
  justify-content: space-evenly;
  margin-bottom: 2em;
}

.header__nav {
  display: flex;
  flex-direction: column;
  /* width: 100%; */
  /* justify-content: space-between; */
  /* align-items: center; */
}

nav {
  margin-top: 0px;
  background-color: cadetblue;
  border: 2px solid orange;
}

nav h3 {
  font-family: 'Segoe UI', sans-serif;
  font-size: 2.55rem;
  font-weight: 400;
  margin-top: 0px;
}

.subtitle {
  /* font-weight: bold; Unprecise use numbers */
  font-size: 1.1rem;
  font-weight: 700;
  text-transform: uppercase;
}

.header__banner {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: .15em;
  /* justify-content: center; */
}

.header__banner p {
  margin-top: 0px;
  margin-bottom: 0px;
}

.header__banner h3 {
  margin-bottom: 0px;
}

.header__nav ul {
  list-style: none;
  display: flex;
  /* align-items: center; This was working because ul elements small
  width */
  justify-content: center; /* x-axis */
  padding: 0px;
  /* justify-content: space-between;
  width: 50px; This is too static will cause issues when adding new items 
  use margin on li elements instead */
  /* REMOVE PADDING (ul elements have padding-left to make space for the
     bullets */
  border: 2px solid black;
}

/* li are block level elements */
nav li {
  margin: 0 1em; /* 0 top-bottom 16px left-right this makes it so that
  each new added item gets effortlessly properly fluidly positioned */
} 
/* @media screen and (min-width: 800px) {
  nav li {
    margin-right: 0em;
  }
} */

.header__nav a {
  text-decoration: none;
  position: relative;
}

/* Una dapat ito bago bigyan ng color lahat na otherwise won't apply */
.current-page {
  color: yellow;
}

nav a {
  color: black;
} 

.current-page:after {
  content: '';

  width: 100%;
  position: absolute;
  left: 0;
  bottom: -4px;

  border-width: 0 0 1px;
  border-style: solid;

  color: yellow;
}

/* Don't be afraid to use element selectors not like you'll have multiple
   nav elements anyway */
nav a:hover,
nav a:focus {
  color: yellow;
  /* 3 WAYS OF HAVING AN OFFSET UNDERLINE */
  /* 1. Using text-underline-offset, easiest and newest (might not work on old 
        browsers) */
  /* text-decoration: underline;
  text-underline-offset: 5px; */
  /* 3. Using border-bottom (disadvantage of the underline always being 
        a little too low) */
  /* border-bottom: 1px solid yellow;
  padding-bottom: 2px; */
}

/* 2. Using :after pseudo element (very precise but complicated)
      REMEMBER to add position: relative to a */
nav a:hover:after,
nav a:focus:after {
  content: '';

  width: 100%;
  position: absolute;
  left: 0;
  bottom: -4px;

  border-width: 0 0 1px;
  border-style: solid;
}

/* @media (min-width: 800px) {
  .header__nav {
    flex-direction: row;
    justify-content: space-evenly;
    align-items: center;
  } */

  /* Gets rid of space overflowing nav (THATS SUPPOSED TO BE A CONTAINER */
  /* nav li {
    margin-right: 0em;
    margin-left: 2em;
  }
} */

/* @media (max-width: 675px) {
  nav {

  }
  nav ul {
    flex-direction: column;
    align-items: center;
    gap: 1em;
  }
} */

/* BODY */
.article-title {
  font-size: 2.4rem;
}

.article-read-more,
.article-info {
  font-size: 1.1rem;
}

.article-read-more {
  color: sienna;
  text-decoration: none;
  font-weight: 700;
}

.article-read-more:hover,
.article-read-more:focus {
  color: saddlebrown;
  /* Creates a two-line look where the above line is thinner and the below
     line thicker */
  text-decoration: underline;
  border-bottom: 2px solid saddlebrown;
  padding-bottom: 2px;
}

a {
  color: crimson;
  /* Go one above the current weight (works like em) */
  font-weight: bolder;
}

/* Since most browsers except Chrome default to bolder as the weight of
   strong elements make sure to set what weight you specifically want
   strong to have */
/* Chrome defaults to bold which is just a word to say font-weight: 700 */
strong {
  font-weight: 700;
}

a:hover,
a:focus {
  color: red;
}

/* .flex {
  display: flex; */

  /* DON"T DO THIS LOL THIS SHOULD BE DEFAULT */
  /* margin: 0 auto;
  max-width: 800px;
} */

/* main {
  width: 75%;
  margin: 1em;
}

aside {
  width: 25%;
  margin: 1em;
} */

/* THINKING MOBILE FIRST */
nav ul {
  flex-direction: column;
  align-items: center;
  gap: 1em;
}

.article-img {
  max-height: 300px;
}

/* MARGINS */
/**
  * Using just margin-bottoms without margin-tops is a hack to make spacing
  * out elements much easier
**/
.article-info {
  margin: 1em 0;
}

/* ARTICLES */
.article-featured {
  border-bottom: red solid 1px;
  padding-bottom: 1em;
  margin-bottom: 1em;
}

.article-recent {
  display: flex;
  flex-direction: column;
  margin-bottom: 2em;
}

/* Always go with a bigger margin and size down from there  */

/* ORDER */
/**
  * order = change the order of elements in a flex div. Uses programming count
  *         so 0 means first to display 1 means second but doesn't have
  *         to start with 0 like the example below, negatives work too.
**/
.article-recent-main {
  order: 2;
} /* Make .article-recent-main 2nd in display inside .article-recent */

.article-recent-secondary {
  order: 1;
} /* Make .article-recent-secondary 1st in display inside .article-recent */

/* @media screen and (min-width: 675px) {
  .article-recent {
    display: flex;
  }
} */

/* This makes it so that our .article-title is aligned with the
   .article-info. However an overlap will happen if our
   .article-title is too long */
/* THIS REALLY SHOULDN'T BE DONE BUT IT DOES WORK */
@media (min-width: 550px) {
  .article-recent-main {
    /* margin-top: -2.3em; */
    /* When you put too much negative the element drags the page up */
  }

  .article-info {
    /* text-align: right; */
  }

  /* OBJECT-FIT */
  /** 
    * object-fit = specify how an img should be resized
    * 
    * VALUES:
    * fill = default, fill given dimension
    * contain = keep aspect ratio but resize to fit new dimension
                this just creates spaces in smaller images
    * cover = keep aspect ration but fill new dimenstion,
              creates a zoom-in effect
    * none = do not follow new dimension (WHY DOES THIS EXIST?)
    * scale-down = scale down to smallest version of none/contain,
    *              so this either does not follow the new dimension
    *              (acts like none) or acts like contain
  **/
  .article-img {
    width: 100%;
    /* Increasing over 100% is possible */
    height: 90%;
    object-fit: cover; /* Crop image to fit new dimension */
    /*object-position: left; /* Cropt to the left */
  }
}

/* Its good practice to always prioritise versatility where new
   info will always be displayed properly and neatly in your
   page */

@media screen and (min-width: 675px) {
  .flex {
    flex-direction: row;
    /* This might not work well for other pages */
    justify-content: space-between;
  }

  main {
    width: 70%;
  }

  aside {
    width: 25%;
    min-width: 200px;
  }

  .article-recent-main {
    width: 60%;
  }

  .article-recent-secondary {
    width: 35%;
  }

  /* Needs this for order */
  .article-featured {
    display: flex;
    flex-direction: column;
  }

  /* Put title below */
  .article-info {
    order: -1;
  }

  .article-img {
    order: -1;
  }

  .article-title {
    order: 0;
  }
}

/* ASIDE WIDGETS */
.sidebar-widget {
  border: 20px solid lightblue;
  padding: 1em;
  margin-bottom: 2em;
}

/* BREAKPOINTS are layout specific (based on look of your page) and
   not device specific (based on what device your viewing it on),
   you don't know what size the device someone is using as there
   is way too many of them so don't base your breakpoints on the
   screen of a tablet. */

.widget-title,
.widget-recent-post-title {
  font-size: 1.6rem;
}

.widget-title {
  font-weight: 700;
}

.widget-recent-post {
  display: flex;
  flex-direction: column;
  border-bottom: 1px solid orange;
  margin-bottom: 1em;
}

/* If last .widget-recent-post is the last child of an element
   no border and margin bottom */
.widget-recent-post:last-child {
  border-bottom: 0;
  margin-bottom: 0;
}

.widget-recent-post-title {
  order: 1;
}

/* Note how even with the :last-child pseudoelement there is still a
   border-bottom that is because the last header is not the last child of an
   element */
header {
  border-bottom: 20px solid magenta;
}

header:last-child {
  border-bottom: 0;
}
